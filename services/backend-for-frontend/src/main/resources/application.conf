backend-for-frontend {
  port = 8088
  ec-keys-identifiers = ""
  rsa-keys-identifiers = ""
  ec-keys-identifiers = ${?EC_KEYS_IDENTIFIERS}
  rsa-keys-identifiers = ${?RSA_KEYS_IDENTIFIERS}

  signer-max-connections = 200
  signer-max-connections = ${?KMS_MAX_CONCURRENCY}

  pagopa-tenant-id = ${PAGOPA_TENANT_ID}
  
  jwt {
    audience = ${ACCEPTED_AUDIENCES}
  }

  client-assertion-audience = ${CLIENT_ASSERTION_JWT_AUDIENCE}

  generated-jwt {
    issuer = ${GENERATED_JWT_ISSUER}
    audience = ${GENERATED_JWT_AUDIENCE}
    duration-seconds = ${GENERATED_JWT_DURATION_SECONDS}
  }

  saml2-jwt {
    support-landing-token-duration-seconds = 300
    support-landing-token-duration-seconds = ${?SUPPORT_LANDING_TOKEN_DURATION_SECONDS}
    support-token-duration-seconds = 3600
    support-token-duration-seconds = ${?SUPPORT_TOKEN_DURATION_SECONDS}
    audience = ${SAML_AUDIENCE}
    callback-url = ${SAML_CALLBACK_URL}
    callback-error-url = ${SAML_CALLBACK_ERROR_URL}
  }

  selfcare-product-id = ${SELFCARE_PRODUCT_ID}

  api-keys {
    party-process = ${PARTY_PROCESS_API_KEY}
    user-registry = ${USER_REGISTRY_API_KEY}
    selfcare-v2   = ${SELFCARE_V2_API_KEY}
  }

  services {
    party-process = ${PARTY_PROCESS_URL}
    user-registry = ${USER_REGISTRY_URL}
    attribute-registry-process = ${ATTRIBUTE_REGISTRY_PROCESS_URL}
    agreement-process = ${AGREEMENT_PROCESS_URL}
    catalog-process = ${CATALOG_PROCESS_URL}
    tenant-process = ${TENANT_PROCESS_URL}
    purpose-process = ${PURPOSE_PROCESS_URL}
    authorization-management = ${AUTHORIZATION_MANAGEMENT_URL}
    authorization-process = ${AUTHORIZATION_PROCESS_URL}
    selfcare-v2 = ${SELFCARE_V2_URL}
  }

  rate-limiter {
    limiter-group = "BFF"
    max-requests = ${RATE_LIMITER_MAX_REQUESTS}
    burst-percentage = ${RATE_LIMITER_BURST_PERCENTAGE}
    rate-interval = ${RATE_LIMITER_RATE_INTERVAL}
    redis-host = ${RATE_LIMITER_REDIS_HOST}
    redis-port = ${RATE_LIMITER_REDIS_PORT}
    timeout = ${RATE_LIMITER_TIMEOUT}
  }

  storage {
    kind = "S3"
    risk-analysis-documents {
        container = ${RISK_ANALYSIS_DOCS_CONTAINER}
        path = "risk-analysis/docs"
        path = ${?RISK_ANALYSIS_DOCS_PATH}
    }

    consumer-documents {
        container = ${CONSUMER_DOCS_CONTAINER}
        path = "agreement/consumer-docs"
        path = ${?CONSUMER_DOCS_PATH}
    }
    
    eservice-documents {
        container = ${ESERVICE_DOCS_CONTAINER}
        path = "eservices/docs"
        path = ${?ESERVICE_DOCS_PATH}
    }
    
    allow-list {
        container = ${ALLOW_LIST_CONTAINER}
        path = "allowlist"
        path = ${?ALLOW_LIST_PATH}
        filename = "allowlist.txt"
        filename = ${?ALLOW_LIST_FILENAME}
    }
  }
  
  privacy-notices {
      table-name-privacy-notices        = ${PRIVACY_NOTICES_DYNAMO_TABLE_NAME}
      table-name-privacy-notices-users  = ${PRIVACY_NOTICES_USERS_DYNAMO_TABLE_NAME}
      pp-uuid                           = ${PRIVACY_NOTICES_PP_UUID}
      tos-uuid                          = ${PRIVACY_NOTICES_TOS_UUID}
      container                         = ${PRIVACY_NOTICES_CONTAINER}
      path                              = "consent"
      path                              = ${?PRIVACY_NOTICES_PATH}
      filename                          = "notice.json"
      filename                          = ${?PRIVACY_NOTICES_FILE_NAME}
  }
}

interop-commons {
  isInternetFacing = true

  jwt {
    internal-token {
      issuer = ${INTERNAL_JWT_ISSUER}
      subject = ${INTERNAL_JWT_SUBJECT}
      audience = ${INTERNAL_JWT_AUDIENCE}
      duration-seconds = ${INTERNAL_JWT_DURATION_SECONDS}
    }
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}

akka.http {
  server {
    pipelining-limit = 128 # default 1
    pipelining-limit = ${?PIPELINING_LIMIT}
    backlog = 100 # default 100
    backlog = ${?BACKLOG_SIZE}
  }

  host-connection-pool {
    max-connections = 16
    max-connections = ${?CONNECTION_POOL_MAX_CONNECTIONS}
    min-connections = 2
    min-connections = ${?CONNECTION_POOL_MIN_CONNECTIONS}
    max-open-requests = 256
    max-open-requests = ${?CONNECTION_POOL_MAX_OPEN_REQUESTS}
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 4
    core-pool-size-factor = 1.0
    core-pool-size-max = 16
    max-pool-size-min = 4
    max-pool-size-factor = 1.0
    max-pool-size-max = 16
  }
  throughput = 1
  throughput = ${?BLOCKING_DISPATCHER_THROUGHPUT}
} 
